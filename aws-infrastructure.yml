# AWS CloudFormation Template for AI Todo App
# Creates EC2 instance with security groups and necessary configurations

AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Todo App - EC2 Infrastructure Setup'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t2.micro
      - t2.small
      - t2.medium
    Description: EC2 instance type
    ConstraintDescription: Must be a valid EC2 instance type

  AllowedIPRange:
    Type: String
    Default: 0.0.0.0/0
    Description: IP range that can access the application (0.0.0.0/0 for public access)
    AllowedPattern: ^(\d{1,3}\.){3}\d{1,3}/\d{1,2}$
    ConstraintDescription: Must be a valid CIDR range (e.g., 0.0.0.0/0)

Resources:
  # VPC Configuration
  TodoAppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: AI-Todo-App-VPC

  # Internet Gateway
  TodoAppIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AI-Todo-App-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TodoAppVPC
      InternetGatewayId: !Ref TodoAppIGW

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TodoAppVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: AI-Todo-App-Public-Subnet

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TodoAppVPC
      Tags:
        - Key: Name
          Value: AI-Todo-App-Public-RT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref TodoAppIGW

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group
  TodoAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for AI Todo App
      VpcId: !Ref TodoAppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIPRange
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedIPRange
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AllowedIPRange
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref AllowedIPRange
          Description: Frontend (development)
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: !Ref AllowedIPRange
          Description: Backend API
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: AI-Todo-App-SG

  # IAM Role for EC2 (for future CloudWatch logs, S3 access, etc.)
  TodoAppEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Name
          Value: AI-Todo-App-EC2-Role

  TodoAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref TodoAppEC2Role

  # EC2 Instance
  TodoAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Ubuntu 20.04 LTS (update based on region)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref TodoAppSecurityGroup
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref TodoAppInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          # Update system
          apt-get update -y
          apt-get upgrade -y
          
          # Install Docker
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh
          usermod -aG docker ubuntu
          
          # Install Node.js 18
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          
          # Install PM2 and serve globally
          npm install -g pm2 serve
          
          # Install Nginx
          apt-get install -y nginx
          
          # Create application directory
          mkdir -p /opt/ai-todo-app
          mkdir -p /opt/ai-todo-app/logs
          chown -R ubuntu:ubuntu /opt/ai-todo-app
          
          # Configure Nginx (basic configuration)
          cat > /etc/nginx/sites-available/ai-todo-app << 'EOF'
          server {
              listen 80;
              server_name _;
              
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
              
              location /api/ {
                  proxy_pass http://localhost:3001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF
          
          # Enable the site
          ln -sf /etc/nginx/sites-available/ai-todo-app /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Start services
          systemctl enable nginx
          systemctl start nginx
          
          # Setup CloudWatch agent (optional)
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          dpkg -i -E ./amazon-cloudwatch-agent.deb
          
          # Signal completion
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource TodoAppInstance --region ${AWS::Region}

      Tags:
        - Key: Name
          Value: AI-Todo-App-Instance
        - Key: Environment
          Value: Production
        - Key: Project
          Value: AI-Todo-App

    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M

Outputs:
  InstanceId:
    Description: Instance ID of the EC2 instance
    Value: !Ref TodoAppInstance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"

  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt TodoAppInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"

  PublicDNS:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt TodoAppInstance.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-PublicDNS"

  ApplicationURL:
    Description: URL to access the AI Todo App
    Value: !Sub "http://${TodoAppInstance.PublicIp}"
    Export:
      Name: !Sub "${AWS::StackName}-AppURL"

  SSHConnection:
    Description: SSH command to connect to the instance
    Value: !Sub "ssh -i your-key.pem ubuntu@${TodoAppInstance.PublicIp}"
    Export:
      Name: !Sub "${AWS::StackName}-SSH"

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref TodoAppSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupId"